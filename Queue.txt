LinearQ---->
package Queue_Data;

import Stack_Data.StackExample;
import java.util.Scanner;

public class LinearQueue 
{
  int front,rear,MaxSize,queue[];
   void createQueue(int size)
   {
       MaxSize=size;
       queue=new int[MaxSize];
       front=0;
       rear=-1;
   }
   void enqueue(int e)
   {
       rear++;
       queue[rear]=e;
   }
   boolean is_full()
   {
       if(rear==MaxSize-1)
           return true;
       else
           return false;
   }
   int dequeue()
   {
      int temp=queue[front];
      front++;
      return(temp);
   }
   boolean is_empty()
   {
       if(front>rear)
           return true;
       else
           return false;
   }
    void print_queue()
     {
         for(int i=front;i<=rear;i++)
             System.out.println(queue[i]);
     }
    public static void main(String args[])
     {
         Scanner in=new Scanner(System.in);
         System.out.println("Enter size of stack:");
         int size=in.nextInt();
         LinearQueue obj=new LinearQueue();
         obj.createQueue(size);
         int ch;
         do
         {
           System.out.println("\n1.Enqueue\n2.Dequeue\n3.Print\n0.Exit\n:");
           ch=in.nextInt();//read
           switch(ch)
           {
               case 1:
                   if(!obj.is_full())
                   {
                       System.out.println("\nEnter a number:");
                       int no=in.nextInt();
                       obj.enqueue(no);
                       System.out.println("Enqueued "+no);
                   }
                   else
                       System.out.println("Queue is Full");
                   break;
               case 2:
                    if(!obj.is_empty())
                   {
                       System.out.println("Dequeued "+obj.dequeue());
                   }
                   else
                       System.out.println("Queue is Empty");
                   break;
               case 3:
                    if(!obj.is_empty())
                     {
                       System.out.println("Elements in queue are");
                       obj.print_queue();
                     }
                    else
                       System.out.println("Queue is Empty");
                   break;
               case 0:
                       System.out.println("Exiting");
                   break;
               default:
                       System.out.println("Wrong Choice");
                   break;
           }
             
         }while(ch!=0);
     }
}
------------------------------------------------------------------------------------------------------
CircularQ----->

package Queue_Data;
import java.util.Scanner;

public class CircularQueue 
{
   int front,rear,MaxSize,count,queue[];
   void createQueue(int size)
   {
       MaxSize=size;
       queue=new int[MaxSize];
       front=0;
       rear=-1;
       count=0;
   }
   void enqueue(int e)
   {
       rear=(rear+1)%MaxSize;
       count++;
       queue[rear]=e;
   }
   boolean is_full()
   {
       if(count==MaxSize)
           return true;
       else
           return false;
   }
   int dequeue()
   {
      int temp=queue[front];
      front=(front+1)%MaxSize;
      count--;
      return(temp);
   }
   boolean is_empty()
   {
       if(count==0)
           return true;
       else
           return false;
   }
    void print_queue()
     {
         int i=front;
         int c=0;
         while(c<count)
         {
             System.out.print(queue[i]+"--");
             i=(i+1)%MaxSize;
             c++;
         }
     }
    public static void main(String args[])
     {
         Scanner in=new Scanner(System.in);
         System.out.println("Enter size of stack:");
         int size=in.nextInt();
         CircularQueue obj=new CircularQueue();
         obj.createQueue(size);
         int ch;
         do
         {
           System.out.println("\n1.Enqueue\n2.Dequeue\n3.Print\n0.Exit\n:");
           ch=in.nextInt();//read
           switch(ch)
           {
               case 1:
                   if(!obj.is_full())
                   {
                       System.out.println("\nEnter a number:");
                       int no=in.nextInt();
                       obj.enqueue(no);
                       System.out.println("Enqueued "+no);
                   }
                   else
                       System.out.println("Queue is Full");
                   break;
               case 2:
                    if(!obj.is_empty())
                   {
                       System.out.println("Dequeued "+obj.dequeue());
                   }
                   else
                       System.out.println("Queue is Empty");
                   break;
               case 3:
                    if(!obj.is_empty())
                     {
                       System.out.println("Elements in queue are");
                       obj.print_queue();
                     }
                    else
                       System.out.println("Queue is Empty");
                   break;
               case 0:
                       System.out.println("Exiting");
                   break;
               default:
                       System.out.println("Wrong Choice");
                   break;
           }
             
         }while(ch!=0);
     }   
}
-------------------------------------------------------------------------------------------------------
PrivorityQ---->

package Queue_Data;
import java.util.Scanner;

public class PriorityQueue 
{
     int front,rear,MaxSize,queue[];
   void createQueue(int size)
   {
       MaxSize=size;
       queue=new int[MaxSize];
       front=0;
       rear=-1;
   }
   void enqueue(int e)
   {
       rear++;
       queue[rear]=e;
       //sort data in order as per need:
       for(int i=front;i<rear;i++)//passes :bubble sort
       {for(int j=front;j<rear;j++)//sort
           {
               if(queue[j]>queue[j+1])
               {
                   int temp=queue[j];
                   queue[j]=queue[j+1];
                   queue[j+1]=temp;
               }
               
           }
       }
   }
   boolean is_full()
   {
       if(rear==MaxSize-1)
           return true;
       else
           return false;
   }
   int dequeue()
   {
      int temp=queue[front];
      front++;
      return(temp);
   }
   boolean is_empty()
   {
       if(front>rear)
           return true;
       else
           return false;
   }
    void print_queue()
     {
         for(int i=front;i<=rear;i++)
             System.out.println(queue[i]);
     }
    public static void main(String args[])
     {
         Scanner in=new Scanner(System.in);
         System.out.println("Enter size of stack:");
         int size=in.nextInt();
       PriorityQueue obj=new PriorityQueue();
         obj.createQueue(size);
         int ch;
         do
         {
           System.out.println("\n1.Enqueue\n2.Dequeue\n3.Print\n0.Exit\n:");
           ch=in.nextInt();//read
           switch(ch)
           {
               case 1:
                   if(!obj.is_full())
                   {
                       System.out.println("\nEnter a number:");
                       int no=in.nextInt();
                       obj.enqueue(no);
                       System.out.println("Enqueued "+no);
                   }
                   else
                       System.out.println("Queue is Full");
                   break;
               case 2:
                    if(!obj.is_empty())
                   {
                       System.out.println("Dequeued "+obj.dequeue());
                   }
                   else
                       System.out.println("Queue is Empty");
                   break;
               case 3:
                    if(!obj.is_empty())
                     {
                       System.out.println("Elements in queue are");
                       obj.print_queue();
                     }
                    else
                       System.out.println("Queue is Empty");
                   break;
               case 0:
                       System.out.println("Exiting");
                   break;
               default:
                       System.out.println("Wrong Choice");
                   break;
           }
             
         }while(ch!=0);
     }  
}
--------------------------------------------------------------------------------------------------------
Sliding Window Pgm---->

package Queue_Data;
import java.util.Scanner;

public class SlidingWindow 
{
     int front,rear,MaxSize,queue[];
   void createQueue(int size)
   {
       MaxSize=size;
       queue=new int[MaxSize];
       front=0;
       rear=-1;
   }
   void enqueue(int e)
   {
       rear++;
       queue[rear]=e;
   }
   boolean is_full()
   {
       if(rear==MaxSize-1)
           return true;
       else
           return false;
   }
   int dequeue()
   {
      int temp=queue[front];
      front++;
      return(temp);
   }
   boolean is_empty()
   {
       if(front>rear)
           return true;
       else
           return false;
   }
    void print_queue()
     {
         for(int i=front;i<=rear;i++)
             System.out.println(queue[i]);
     }
    void sliding_window(int size)
     {
         if((rear-front+1)<size)
         {
             int max=queue[front];//ref
             for(int i=front+1;i<=rear;i++)
                 if(queue[i]>max)
                     max=queue[i];
             System.out.println("Max is window :"+max);
         }
         else
         {
           System.out.println("Max is window :"); 
           for(int i=front;i<=rear-size+1;i++)
           {
               int max=queue[i];
               for(int j=i+1;j<=i+size-1;j++)
               {
                   if(queue[j]>max)
                       max=queue[j];
               }
               System.out.print(max); 
           }
     }
     }
    public static void main(String args[])
     {
         Scanner in=new Scanner(System.in);
         System.out.println("Enter size of stack:");
         int size=in.nextInt();
         SlidingWindow  obj=new SlidingWindow ();
         obj.createQueue(size);
         int ch;
         do
         {
           System.out.println("\n1.Enqueue\n2.Dequeue\n3.Print\n4.Run Sliding window\n0.Exit\n:");
           ch=in.nextInt();//read
           switch(ch)
           {
               case 1:
                   if(!obj.is_full())
                   {
                       System.out.println("\nEnter a number:");
                       int no=in.nextInt();
                       obj.enqueue(no);
                       System.out.println("Enqueued "+no);
                   }
                   else
                       System.out.println("Queue is Full");
                   break;
               case 2:
                    if(!obj.is_empty())
                   {
                       System.out.println("Dequeued "+obj.dequeue());
                   }
                   else
                       System.out.println("Queue is Empty");
                   break;
               case 3:
                    if(!obj.is_empty())
                     {
                       System.out.println("Elements in queue are");
                       obj.print_queue();
                     }
                    else
                       System.out.println("Queue is Empty");
                   break;
               case 0:
                       System.out.println("Exiting");
                   break;
               
               case 4:
                    if(!obj.is_empty())
                     {
                       System.out.println("Window size");
                       size=in.nextInt();
                       obj.sliding_window(size);
                     }
                    else
                       System.out.println("Queue is Empty");
                   break;
                   
               default:
                       System.out.println("Wrong Choice");
                   break;
           }
             
         }while(ch!=0);
     }
} 
----------------------------------------------------------------------------------------------------------------------------------------------------------    
Double_Ended_Queue----->

package Queue_Data;
import java.util.Scanner;

public class Double_Ended_Queue 
{
    int queue[],front_left,front_right,rear_left,rear_right,MaxSize,mid;
    void createQueue(int size)
    {
        MaxSize=size;
        queue=new int[size];
        mid=size/2;
        front_left=mid;
        front_right=mid-1;
        rear_left=mid-1;
        rear_right=mid;
                
    }
    void enqueue_left(int e)
    {
        rear_left++;
        queue[rear_left]=e;
   
        
    }
    void enqueue_right(int e)
    {
        rear_right--;
        queue[rear_right]=e;
       
    }
    boolean is_full_left()
   {
       if(rear_left==MaxSize-1)
           return true;
       else
           return false;
   }
    
    boolean is_full_right()
   {
       if(rear_right==0)
           return true;
       else
           return false;
   }
    
    int dequeue_left()
    {
        int temp=queue[front_left];
        front_left++;
        return(temp);
    }
     int dequeue_right()
    {
        int temp=queue[front_right];
        front_right--;
        return(temp);
    }
   boolean is_empty_right()
   {
       if(front_right<rear_right)
           return true;
       else
           return false;
   }
    boolean is_empty_left()
   {
       if(front_left>rear_left)
           return true;
       else
           return false;
   } 
 void print_queue_left()
     {
         for(int i=front_left;i<=rear_left;i++)
             System.out.println(queue[i]);
     }   
 void print_queue_right()
     {
         for(int i=front_right;i>=rear_right;i--)
             System.out.println(queue[i]);
     }
 public static void main(String args[])
     {
         Scanner in=new Scanner(System.in);
         System.out.println("Enter size of stack:");
         int size=in.nextInt();
         Double_Ended_Queue obj=new Double_Ended_Queue();
         obj.createQueue(size);
         int ch;
         do
         {
           System.out.println("\n1.Enqueue_Left\n2.Enqueue_Right\n3.Dequeue_Left\n4.Dequeue_right\n5.Print_left\n6.Print_right\n0.Exit\n:");
           ch=in.nextInt();//read
           switch(ch)
           {
               case 1:
                   if(!obj.is_full_left())
                   {
                       System.out.println("\nEnter a number:");
                       int no=in.nextInt();
                       obj.enqueue_left(no);
                       System.out.println("Enqueued "+no);
                   }
                   else
                       System.out.println("Queue is Full");
                   break;
                case 2:
                   if(!obj.is_full_right())
                   {
                       System.out.println("\nEnter a number:");
                       int no=in.nextInt();
                       obj.enqueue_right(no);
                       System.out.println("Enqueued "+no);
                   }
                   else
                       System.out.println("Queue is Full");
                   break;
               case 3:
                    if(!obj.is_empty_left())
                   {
                       System.out.println("Dequeued "+obj.dequeue_left());
                   }
                   else
                       System.out.println("Queue is Empty");
                   break;
               case 4:
                     if(!obj.is_empty_right())
                   {
                       System.out.println("Dequeued "+obj.dequeue_right());
                   }
                   else
                       System.out.println("Queue is Empty");
                   break;
               case 5:
                    if(!obj.is_empty_left())
                     {
                       System.out.println("Elements in queue are");
                       obj.print_queue_left();
                     }
                    else
                       System.out.println("Queue is Empty");
                   break;
                case 6:
                    if(!obj.is_empty_right())
                     {
                       System.out.println("Elements in queue are");
                       obj.print_queue_right();
                     }
                    else
                       System.out.println("Queue is Empty");
                   break;
               case 0:
                       System.out.println("Exiting");
                   break;
               default:
                       System.out.println("Wrong Choice");
                   break;
           }
             
         }while(ch!=0);
     }
}


