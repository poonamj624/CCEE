package LinkedList_Data;

public class Node 
{
    int data;
    Node next;//self reference
    Node(int data)
    {
        this.data=data;
        this.next=null;//address of other Node
    }
      
}
===================================================

Linear Linked List---------------------->

package LinkedList_Data;

import java.util.Scanner;

public class LinearLinkedList 
{
    Node root;
    
    void createList()
    {
        root=null;//root is never created but assigned as per need
        //the 1st node is called root
    }
    
    void insert_left(int e)
    {
        Node n=new Node(e);
        if(root==null)
            root=n;
        else
        {
            n.next=root;//1
            root=n;//2
        }
        System.out.println("Inserted");       
    }
    void insert_right(int e)
    {   Node n=new Node(e);
        if(root==null)
            root=n;
        else
        {
           Node t=root;//1
           while(t.next!=null)//2
               t=t.next;
           t.next=n;//3
        }
        System.out.println("Inserted");       
    }
     void delete_left()
    {
        if(root==null)
            System.out.println("Empty List");       
        else
        {
          Node t=root;//1
          root=root.next;//2
          System.out.println(t.data+" deleted");       
        }
    }
    void delete_right()
    {   if(root==null)
            System.out.println("Empty List");       
        else
        {
          Node t=root;//1
          Node t2=t;//1
          while(t.next!=null)//2
          {t2=t;t=t.next; }
          if(root==t)//only one node
              root=null;//manual reset
          else
             t2.next=null;//3
          System.out.println(t.data+" deleted");       
         }
    }
    
void print_list()
{  if(root==null)
            System.out.println("Empty List");       
   else
   {
       Node t=root;
       while(t!=null)
       {
           System.out.print("| "+t.data+" |->");
           t=t.next;
       }
   }   
}
void search(int key)
{  if(root==null)
            System.out.println("Empty List");       
   else
   {   Node t=root;
       while(t!=null && key!=t.data)
         t=t.next;
       
       if(t==null)
               System.out.println(key+" not found in list");
       else
               System.out.println(key+" found in list");
   }
}

void deleteKey(int key)
{  if(root==null)
            System.out.println("Empty List");       
   else//not empty
   {   
       Node t=root;Node t2=root;
       while(t!=null && key!=t.data)
       {
        t2=t;       
        t=t.next;
       }
       if(t==null)//not found
               System.out.println(key+" not found in list");
       else//found
       {
           System.out.println(key+" found in list");
           if(t==root)//case1:left most
            root=root.next;
           else if(t.next==null)//case 2:right most
             t2.next=null;
           else//case 3:in between
             t2.next=t.next;
           System.out.println(t.data+" deleted");     
       }
           
    }
   }
    

void insertAt(int index,int e)
    {  
        if(index==0)
        {
            Node n=new Node(e);
            if(root==null)
                root=n;
            else
            {
                n.next=root;
                root=n;
            }
        }
        else{
            Node t=root;
            Node t2=root;
            while(t!=null && index>0)
            {
                t2=t;
                t=t.next;
                index--;
            }
            if(t==null)
                System.out.println("index out of range");
            else
            {
                Node n=new Node(e);
                t2.next=n;//1
                n.next=t;//2
                System.out.println("iserted:");
            }
                
        }
    }

      
   public static void main(String args[])
     {
         Scanner in=new Scanner(System.in);
         LinearLinkedList obj=new LinearLinkedList();
         obj.createList();
         int ch;
         do
         {
           System.out.println("\n1.Insert Left\n2.Insert Right\n3.Delete Left\n4.Delete Right\n5.Search\n6.Print List\n7.Delete on Key\n8.Insert at\n0.Exit\n:");
           ch=in.nextInt();//read
           switch(ch)
           {
               case 1:
                       System.out.println("\nEnter a number:");
                       int e=in.nextInt();
                       obj.insert_left(e);
                       break;
               case 2:
                       System.out.println("\nEnter a number:");
                       e=in.nextInt();
                       obj.insert_right(e);
                       break;    case 3:
                      obj.delete_left();
                      break;
               case 4:
                      obj.delete_right();
                      break;
               case 5:
                       System.out.println("\nEnter a number to search:");
                       e=in.nextInt();
                       obj.search(e);
                       break;
               case 6:
                   System.out.println("\nelements in list:");
                   obj.print_list();
                   break;
               case 7:
                       System.out.println("\nEnter a number to delete:");
                       e=in.nextInt();
                       obj.deleteKey(e);
                       break;
               case 8:
                       System.out.println("\nEnter index and data to insert:");
                       int index=in.nextInt();
                       e=in.nextInt();
                       obj.insertAt(index,e);
                       break;
               case 0:
                       System.out.println("Exiting");
                   break;
               default:
                       System.out.println("Wrong Choice");
                   break;
           }
             
         }while(ch!=0);
     }   
}
---------------------------------------------------------------------------------------------------------------------------------
-------------------------Dynamic_Stack------------------------------------------
package LinkedList_Data;

import Stack_Data.StackExample;
import java.util.Scanner;

public class Dynamic_Stack
{
    Node tos;
    
    void createStack()
    {
        tos=null;//root is never created but assigned as per need
        //the 1st node is called root
    }
    
    void push(int e)
    {
        Node n=new Node(e);
        if(tos==null)
            tos=n;
        else
        {
            n.next=tos;//1
            tos=n;//2
        }
        System.out.println("Pushed");       
    }
    
    void pop()
    {
        if(tos==null)
            System.out.println("Empty List");       
        else
        {
          Node t=tos;//1
          tos=tos.next;//2
          System.out.println(t.data+" deleted");       
        }
    }
    void peek()
    {
        if(tos==null)
            System.out.println("Empty List");       
        else
        {
          System.out.println("@TOS:"+tos.data);       
        }
    }
    void print_stack()
    {  if(tos==null)
                System.out.println("Empty Stack");       
       else
       {
           Node t=tos;
           while(t!=null)
           {
               System.out.println(t.data);
               t=t.next;
           }
       }   
    }
    
  public static void main(String args[])
     {
         Scanner in=new Scanner(System.in);        
         Dynamic_Stack obj=new Dynamic_Stack();
         obj.createStack();
         int ch;
         do
         {
           System.out.println("\n1.Push\n2.Pop\n3.Peek\n4.Print\n0.Exit\n:");
           ch=in.nextInt();//read
           switch(ch)
           {
               case 1:
                       System.out.println("\nEnter a number:");
                       int no=in.nextInt();
                       obj.push(no);
                       System.out.println("Pushed "+no);
                       break;
               case 2:
                      obj.pop();
                    break;
               case 3:
                   obj.peek();
                   break;
               case 4:
                       System.out.println("Elements on stack are");
                       obj.print_stack();
                       break;
               case 0:
                       System.out.println("Exiting");
                   break;
               default:
                       System.out.println("Wrong Choice");
                   break;
           }
             
         }while(ch!=0);
     }  
}
-------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------Dynamic_Queue...............................................................................................
package LinkedList_Data;

import Queue_Data.LinearQueue;
import java.util.Scanner;

public class Dynamic_Queue 
{
    Node rear,front;
    
    void createQueue()
    {
        rear=front=null;//root is never created but assigned as per need
        //the 1st node is called root
    }
    
    void enqueue(int e)
    {   Node n=new Node(e);
        if(rear==null)
        {rear=front=n;}
        else
        {
          rear.next=n;
          rear=n;
        }
        System.out.println("Enqueued");       
    }
    void dequeue()
    {
        if(front==null)
            System.out.println("Empty List");       
        else
        {
          Node t=front;//1
          if (front==rear)
          {
              front=rear=null;
          }
          else
          {
          front=front.next;//2
          System.out.println(t.data+" dequeued");       
          }
        }
    }
    void print_queue()
{  if(front==null)
            System.out.println("Empty List");       
   else
   {
       Node t=front;
       while(t!=null)
       {
           System.out.print("| "+t.data+" |----");
           t=t.next;
       }
   }   
}
      public static void main(String args[])
     {
         Scanner in=new Scanner(System.in);
         Dynamic_Queue obj=new Dynamic_Queue();
         obj.createQueue();
         int ch;
         do
         {
           System.out.println("\n1.Enqueue\n2.Dequeue\n3.Print\n0.Exit\n:");
           ch=in.nextInt();//read
           switch(ch)
           {
               case 1:
                       System.out.println("\nEnter a number:");
                       int no=in.nextInt();
                       obj.enqueue(no);
                       System.out.println("Enqueued "+no);
                       break;
               case 2:
                   obj.dequeue();
                   break;
               case 3:
                       System.out.println("Elements in queue are");
                       obj.print_queue();
                       break;
               case 0:
                       System.out.println("Exiting");
                   break;
               default:
                       System.out.println("Wrong Choice");
                   break;
           }
             
         }while(ch!=0);
     }
}
-------------------------------------------------------------------------------------------------------------------------------------
===================================================================================================================

package LinkedList_Data;

public class DNode 
{
    int data;
    DNode left,right;//self reference
    DNode(int data)
    {
        this.data=data;
        this.left=this.right=null;//address of other Node
    }
      
}
---------------------------------------------------------------------------------------------------------------------------
-------------------------CircularLinkedList------------------------------------------------------------------------

package LinkedList_Data;

import java.util.Scanner;

public class CircularLinkedList
{
     Node root,last;
    
    void createList()
    {
        root=last=null;//root is never created but assigned as per need
        //the 1st node is called root
    }
    
    void insert_left(int e)
    {
        Node n=new Node(e);
        if(root==null)
        { root=last=n;
          last.next=root;}
        else
        {
            n.next=root;//1
            root=n;//2
            last.next=root;//3
        }
        System.out.println("Inserted");       
    }
    void insert_right(int e)
    {   Node n=new Node(e);
         if(root==null)
        { root=last=n;
          last.next=root;}
        else
        {
           last.next=n;//1
           last=n;//2
           last.next=root;//3
        }
        System.out.println("Inserted");       
    }
     void delete_left()
    {
        if(root==null)
            System.out.println("Empty List");       
        else
        {
          Node t=root;//1
          if(root==last)//single node
          {root=last=null;}
          else
          { root=root.next;//2
            last.next=root;//3
          }
          System.out.println(t.data+" deleted");       
        }
    }
    void delete_right()
    {   if(root==null)
            System.out.println("Empty List");       
        else
        {
          Node t=root;//1
          Node t2=t;//1
          while(t!=last)//2
          {t2=t;t=t.next; }
          if(root==last)//only one node
          {root=last=null;}//manual reset}
          else
          {last=t2;
           last.next=root;
          }
          System.out.println(t.data+" deleted");       
         }
    }
    
void print_list()
{  if(root==null)
            System.out.println("Empty List");       
   else
   {
       Node t=root;
       do
       {
           System.out.print("| "+t.data+" |->");
           t=t.next;
       }while(t!=root);
   }   
}

 public static void main(String args[])
     {
         Scanner in=new Scanner(System.in);
         CircularLinkedList obj=new CircularLinkedList();
         obj.createList();
         int ch;
         do
         {
           System.out.println("\n1.Insert Left\n2.Insert Right\n3.Delete Left\n4.Delete Right\n5.Print List\n0.Exit\n:");
           ch=in.nextInt();//read
           switch(ch)
           {
               case 1:
                       System.out.println("\nEnter a number:");
                       int e=in.nextInt();
                       obj.insert_left(e);
                       break;
               case 2:
                       System.out.println("\nEnter a number:");
                       e=in.nextInt();
                       obj.insert_right(e);
                       break;    
               case 3:
                      obj.delete_left();
                      break;
               case 4:
                      obj.delete_right();
                      break;
              
               case 5:
                   System.out.println("\nelements in list:");
                   obj.print_list();
                   break;
             
               case 0:
                       System.out.println("Exiting");
                   break;
               default:
                       System.out.println("Wrong Choice");
                   break;
           }
             
         }while(ch!=0);
     }
}
-----------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------DoubleLinkedList -----------------------------------------------------------------
package LinkedList_Data;

public class DoubleLinkedList 
{
    DNode root;
    
    void createList()
    {
        root=null;//root is never created but assigned as per need
        //the 1st node is called root
    }
    
    void insert_left(int e)
    {
        DNode n=new DNode(e);
        if(root==null)
            root=n;
        else
        {
            n.right=root;//1
            root.left=n;//2
            root=n;//3
        }
        System.out.println("Inserted");       
    }
    void insert_right(int e)
    {   DNode n=new DNode(e);
        if(root==null)
            root=n;
        else
        {
           DNode t=root;//1
           while(t.right!=null)//2
               t=t.right;
           t.right=n;//3
           n.left=t;//4
        }
        System.out.println("Inserted");       
    }
     void delete_left()
    {
        if(root==null)
            System.out.println("Empty List");       
        else
        {
          DNode t=root;//1
          if(root.right==null)//single node
              root=null;
          else
          { root=root.right;root.left=null;//3}
          System.out.println(t.data+" deleted");       
        }
    }
    void delete_right()
    {   if(root==null)
            System.out.println("Empty List");       
        else
        {
          DNode t=root;//1
          while(t.right!=null)//2
            t=t.right; 
          if(root==t)//only one node
              root=null;//manual reset
          else
          {  DNode t2=t.left;//3
             t2.right=null;//4
          }
          System.out.println(t.data+" deleted");       
         }
    }
    
void print_list()
{  if(root==null)
            System.out.println("Empty List");       
   else
   {
       DNode t=root;
       while(t!=null)
       {
           System.out.print("| "+t.data+" |->");
           t=t.right;
       }
   }   
}
void print_list_Rev()
{  if(root==null)
            System.out.println("Empty List");       
   else
   {
       DNode t=root;
       while(t.right!=null)
           t=t.right;
       while(t!=null)
       {    System.out.print(t.data);
            t=t.left;
       }
       
   }   
}
}
}
