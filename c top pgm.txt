







C Strings

String in C language is an array of characters that is terminated by \0 (null character).

There are two ways to declare string in c language.
1.By char array
2.By string literal

Let's see the example of declaring string by char array in C language.




copy to clipboard
1.char ch[10]={'j', 'a', 'v', 'a', 't', 'p', 'o', 'i', 'n', 't', '\0'};  

As you know well, array index starts from 0, so it will be represented as in the figure given below.
C Array 
While declaring string, size is not mandatory. So you can write the above code as given below:




copy to clipboard
1.char ch[]={'j', 'a', 'v', 'a', 't', 'p', 'o', 'i', 'n', 't', '\0'};  

You can also define string by string literal in C language. For example:




copy to clipboard
1.char ch[]="javatpoint";  

In such case, '\0' will be appended at the end of string by the compiler.

Difference between char array and string literal

The only difference is that string literal cannot be changed whereas string declared by char array can be changed.


String Example in C

Let's see a simple example to declare and print string. The '%s' is used to print string in c language.




copy to clipboard
1.#include <stdio.h>  
2.void main ()  
3.{  
4.   char ch[11]={'j', 'a', 'v', 'a', 't', 'p', 'o', 'i', 'n', 't', '\0'};  
5.   char ch2[11]="javatpoint";  
6.  
7.   printf("Char Array Value is: %s\n", ch);  
8.   printf("String Literal Value is: %s\n", ch2);  
9.}  

Output:

Char Array Value is: javatpoint
String Literal Value is: javatpoint


C String Functions

There are many important string functions defined in "string.h" library.


No.

Function

Description

1) strlen(string_name) returns the length of string name. 
2) strcpy(destination, source) copies the contents of source string to destination string. 
3) strcat(first_string, second_string) concats or joins first string with second string. The result of the string is stored in first string. 
4) strcmp(first_string, second_string) compares the first string with second string. If both strings are same, it returns 0. 

1) C String Length: strlen()

The strlen() function returns the length of the given string. It doesn't count null character '\0'.




copy to clipboard
1.#include <stdio.h>  
2.void main()  
3.{  
4.   char ch[20]={'j', 'a', 'v', 'a', 't', 'p', 'o', 'i', 'n', 't', '\0'};  
5.   printf("Length of string is: %d",strlen(ch));  
6.}  

Output:

Length of string is: 10


2) C Copying String: strcpy()

The strcpy(destination, source) function copies the source string in destination.




copy to clipboard
1.#include <stdio.h>  
2.void main()  
3.{  
4.   char ch[20]={'j', 'a', 'v', 'a', 't', 'p', 'o', 'i', 'n', 't', '\0'};  
5.   char ch2[20];  
6.   strcpy(ch2,ch);  
7.   printf("Value of second string is: %s",ch2);  
8.}  

Output:

Value of second string is: javatpoint


3) C String Concatenation: strcat()

The strcat(first_string, second_string) function concatenates two strings and result is returned to first_string.




copy to clipboard
1.#include <stdio.h>  
2.void main()  
3.{  
4.   char ch[10]={'h', 'e', 'l', 'l', 'o', '\0'};  
5.   char ch2[10]={'c', '\0'};  
6.   strcat(ch,ch2);  
7.   printf("Value of first string is: %s",ch);  
8.}  

Output:

Value of first string is: helloc


4) C String Comparision: strcmp()

The strcmp(first_string, second_string) function compares two string and returns 0 if both strings are equal.

Here, we are using gets() function which reads string from the console.




copy to clipboard
1.#include <stdio.h>  
2.void main()  
3.{  
4.   char str1[20],str2[20];  
5.  printf("Enter 1st string: ");  
6.  gets(str1);//reads string from console  
7.  printf("Enter 2nd string: ");  
8.  gets(str2);  
9.  if(strcmp(str1,str2)==0)  
10.      printf("Strings are equal");  
11.  else  
12.      printf("Strings are not equal");  
13.}  

Output:

Enter 1st string: hello
Enter 2nd string: hello
Strings are equal














Data Types in C

A data type specifies the type of data that a variable can store such as integer, floating, character etc.

There are 4 types of data types in C language.


Types

Data Types

Basic Data Type int, char, float, double 
Derived Data Type array, pointer, structure, union 
Enumeration Data Type enum 
Void Data Type void 

Basic Data Types

The basic data types are integer-based and floating-point based. C language supports both signed and unsigned literals.

The memory size of basic data types may change according to 32 or 64 bit operating system.

Let's see the basic data types. It size is given according to 32 bit OS.


Data Types

Memory Size

Range

char 1 byte -128 to 127 
signed char 1 byte -128 to 127 
unsigned char 1 byte 0 to 127 
short 2 byte -32,768 to 32,767 
signed short 2 byte -32,768 to 32,767 
unsigned short 2 byte 0 to 32,767 
int 2 byte -32,768 to 32,767 
signed int 2 byte -32,768 to 32,767 
unsigned int 2 byte 0 to 32,767 
short int 2 byte -32,768 to 32,767 
signed short int 2 byte -32,768 to 32,767 
unsigned short int 2 byte 0 to 32,767 
long int 4 byte  
signed long int 4 byte  
unsigned long int 4 byte  
float 4 byte  
double 8 byte  
long double 10 byte 








Prime Number program in C

Prime number in C: Prime number is a number that is greater than 1 and divided by 1 or itself. In other words, prime numbers can't be divided by other numbers than itself or 1. For example 2, 3, 5, 7, 11, 13, 17, 19, 23.... are the prime numbers.

Note: Zero (0) and 1 are not considered as prime numbers. Two (2) is the only one even prime number because all the numbers can be divided by 2.

Let's see the prime number program in C. In this c program, we will take an input from the user and check whether the number is prime or not.




copy to clipboard
1.#include<stdio.h>  
2.#include<conio.h>  
3.void main()  
4.{  
5.int n,i,m=0,flag=0;  
6.clrscr();  
7.printf("Enter the number to check prime:");  
8.scanf("%d",&n);  
9.m=n/2;  
10.for(i=2;i<=m;i++)  
11.{  
12.if(n%i==0)  
13.{  
14.printf("Number is not prime");  
15.flag=1;  
16.break;  
17.}  
18.}  
19.if(flag==0)  
20.printf("Number is prime");  
21.getch();  
22.}   

Output:

Enter the number to check prime:56
Number is not prime


Enter the number to check prime:23
Number is prime







Palindrome program in C

Palindrome number in c: A palindrome number is a number that is same after reverse. For example 121, 34543, 343, 131, 48984 are the palindrome numbers.

Palindrome number algorithm
?Get the number from user
?Hold the number in temporary variable
?Reverse the number
?Compare the temporary number with reversed number
?If both numbers are same, print palindrome number
?Else print not palindrome number

Let's see the palindrome program in C. In this c program, we will get an input from the user and check whether number is palindrome or not.




copy to clipboard
1.#include<stdio.h>  
2.#include<conio.h>  
3.main()  
4.{  
5.int n,r,sum=0,temp;  
6.clrscr();  
7.printf("enter the number=");  
8.scanf("%d",&n);  
9.temp=n;  
10.while(n>0)  
11.{  
12.r=n%10;  
13.sum=(sum*10)+r;  
14.n=n/10;  
15.}  
16.if(temp==sum)  
17.printf("palindrome number ");  
18.else  
19.printf("not palindrome");  
20.getch();  
21.}  

Output:

enter the number=151
palindrome  number


enter the number=5621
not palindrome  number









Factorial Program in C

Factorial Program in C: Factorial of n is the product of all positive descending integers. Factorial of n is denoted by n!. For example:




copy to clipboard
1.5! = 5*4*3*2*1 = 120  
2.3! = 3*2*1 = 6  

Here, 5! is pronounced as "5 factorial", it is also called "5 bang" or "5 shriek".

The factorial is normally used in Combinations and Permutations (mathematics).

There are many ways to write the factorial program in c language. Let's see the 2 ways to write the factorial program.
?Factorial Program using loop
?Factorial Program using recursion

Factorial Program using loop

Let's see the factorial Program using loop.




copy to clipboard
1.#include<stdio.h>  
2.#include<conio.h>  
3.void main(){  
4.  int i,fact=1,number;  
5.  clrscr();  
6.  printf("Enter a number: ");  
7.  scanf("%d",&number);  
8.  
9.  for(i=1;i<=number;i++){  
10.      fact=fact*i;  
11.  }  
12.  printf("Factorial of %d is: %d",number,fact);  
13.  getch();  
14.}  

Output:

Enter a number: 5
Factorial of 5 is: 120


Factorial Program using recursion in C

Let's see the factorial program in c using recursion.




copy to clipboard
1.#include<stdio.h>  
2.#include<conio.h>  
3.  
4.long factorial(int n)  
5.{  
6.  if (n == 0)  
7.    return 1;  
8.  else  
9.    return(n * factorial(n-1));  
10.}  
11.   
12.void main()  
13.{  
14.  int number;  
15.  long fact;  
16.  clrscr();  
17.  printf("Enter a number: ");  
18.  scanf("%d", &number);   
19.   
20.  fact = factorial(number);  
21.  printf("Factorial of %d is %ld\n", number, fact);  
22.  getch();  
23.}  

Output:

Enter a number: 6
Factorial of 5 is: 720








Armstrong Number in C

Before going to write the c program to check whether the number is Armstrong or not, let's understand what is Armstrong number.

Armstrong number is a number that is equal to the sum of cubes of its digits. For example 0, 1, 153, 370, 371 and 407 are the Armstrong numbers.

Let's try to understand why 153 is an Armstrong number.




copy to clipboard
1.153 = (1*1*1)+(5*5*5)+(3*3*3)  
2.where:  
3.(1*1*1)=1  
4.(5*5*5)=125  
5.(3*3*3)=27  
6.So:  
7.1+125+27=153  

Let's try to understand why 371 is an Armstrong number.




copy to clipboard
1.371 = (3*3*3)+(7*7*7)+(1*1*1)  
2.where:  
3.(3*3*3)=27  
4.(7*7*7)=343  
5.(1*1*1)=1  
6.So:  
7.27+343+1=371  

Let's see the c program to check Armstrong Number in C.




copy to clipboard
1.#include<stdio.h>  
2.#include<conio.h>  
3.main()  
4.{  
5.int n,r,sum=0,temp;  
6.clrscr();  
7.printf("enter the number=");  
8.scanf("%d",&n);  
9.temp=n;  
10.while(n>0)  
11.{  
12.r=n%10;  
13.sum=sum+(r*r*r);  
14.n=n/10;  
15.}  
16.if(temp==sum)  
17.printf("armstrong  number ");  
18.else  
19.printf("not armstrong number");  
20.getch();  
21.}  

Output:

enter the number=153
armstrong number


enter the number=5
not armstrong number








Sum of digits program in C

C program to sum each digit: We can write the sum of digits program in c language by the help of loop and mathematical operation only.

Sum of digits algorithm

To get sum of each digits by c program, use the following algorithm:
?Step 1: Get number by user
?Step 2: Get the modulus/remainder of the number
?Step 3: sum the remainder of the number
?Step 4: Divide the number by 10
?Step 5: Repeat the step 2 while number is greater than 0.

Let's see the sum of digits program in C.




copy to clipboard
1.#include<stdio.h>  
2.#include<conio.h>  
3.void main()  
4.{  
5.int n,sum=0,m;  
6.clrscr();  
7.printf("Enter a number:");  
8.scanf("%d",&n);  
9.while(n>0)  
10.{  
11.m=n%10;  
12.sum=sum+m;  
13.n=n/10;  
14.}  
15.printf("Sum is=%d",sum);  
16.getch();  
17.}     

Output:

Enter a number:654
Sum is=15


Enter a number:123
Sum is=6







C Program to reverse number

We can reverse a number in c using loop and arithmetic operators. In this program, we are getting number as input from the user and reversing that number. Let's see a simple c example to reverse a given number.




copy to clipboard
1.#include<stdio.h>  
2.#include<conio.h>  
3.main()  
4.{  
5.int n, reverse=0, rem;  
6.clrscr();  
7.printf("Enter a number: ");  
8.  scanf("%d", &n);  
9.  while(n!=0)  
10.  {  
11.     rem=n%10;  
12.     reverse=reverse*10+rem;  
13.     n/=10;  
14.  }  
15.  printf("Reversed Number: %d",reverse);  
16.getch();  
17.}  

Output:

Enter a number: 123
Reversed Number: 321








C Program to swap two numbers without third variable

We can swap two numbers without using third variable. There are two common ways to swap two numbers without using third variable:
1.By + and -
2.By * and /

Program 1: Using + and -

Let's see a simple c example to swap two numbers without using third variable.




copy to clipboard
1.#include<stdio.h>  
2.#include<conio.h>  
3.main()  
4.{  
5.int a=10, b=20;    
6.clrscr();    
7.printf("Before swap a=%d b=%d",a,b);    
8.  
9.a=a+b;//a=30 (10+20)  
10.b=a-b;//b=10 (30-20)  
11.a=a-b;//a=20 (30-10)  
12.  
13.printf("\nAfter swap a=%d b=%d",a,b);  
14.getch();  
15.}  

Output:

Before swap a=10 b=20
After swap a=20 b=10


Program 2: Using * and /

Let's see another example to swap two numbers using * and /.




copy to clipboard
1.#include<stdio.h>  
2.#include<conio.h>  
3.main()  
4.{  
5.int a=10, b=20;    
6.clrscr();    
7.printf("Before swap a=%d b=%d",a,b);    
8.  
9.a=a*b;//a=200 (10*20)  
10.b=a/b;//b=10 (200/20)  
11.a=a/b;//a=20 (200/10)  
12.  
13.printf("\nAfter swap a=%d b=%d",a,b);   
14.getch();  
15.}  

Output:

Before swap a=10 b=20
After swap a=20 b=10










C Program to print "hello" without semicolon

We can print "hello" or "hello world" or anything else in C without using semicolon. There are various ways to do so:
1.Using if
2.Using switch
3.Using loop etc.

Program 1: Using if statement

Let's see a simple c example to print "hello world" using if statement and without using semicolon.




copy to clipboard
1.#include<stdio.h>  
2.void main(){  
3.   if(printf("hello world")){}  
4.}  

Output:

hello world


Program 2: Using switch statement

Let's see a simple c example to print "hello world" using switch statement and without using semicolon.




copy to clipboard
1.#include<stdio.h>  
2.void main(){  
3.   switch(printf("hello world")){}  
4.}  

Output:

hello world


Program 3: Using while loop

Let's see a simple c example to print "hello world" using while loop and without using semicolon.




copy to clipboard
1.#include<stdio.h>  
2.void main(){  
3.   while(!printf("hello world")){}  
4.}  

Output:

hello world






C Program without main() function

We can write c program without using main() function. To do so, we need to use #define preprocessor directive.

Let's see a simple program to print "hello" without main() function.




copy to clipboard
1.#include<stdio.h>  
2.#define start main  
3.void start() {  
4.   printf("Hello");  
5.}  

Output:

Hello




























Fibonacci Series in C

Fibonacci Series in C: In case of fibonacci series, next number is the sum of previous two numbers for example 0, 1, 1, 2, 3, 5, 8, 13, 21 etc. The first two numbers of fibonacci series are 0 and 1.

There are two ways to write the fibonacci series program:
?Fibonacci Series without recursion
?Fibonacci Series using recursion

Fibonacci Series in C without recursion

Let's see the fibonacci series program in c without recursion.




copy to clipboard
1.#include<stdio.h>  
2.#include<conio.h>  
3.void main()  
4.{  
5. int n1=0,n2=1,n3,i,number;  
6. clrscr();  
7. printf("Enter the number of elements:");  
8. scanf("%d",&number);  
9. printf("\n%d %d",n1,n2);//printing 0 and 1  
10.  
11. for(i=2;i<number;++i)//loop starts from 2 because 0 and 1 are already printed  
12. {  
13.  n3=n1+n2;  
14.  printf(" %d",n3);  
15.  n1=n2;  
16.  n2=n3;  
17. }  
18.getch();  
19.}  

Output:

Enter the number of elements:15
0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 


Fibonacci Series using recursion in C

Let's see the fibonacci series program in c using recursion.




copy to clipboard
1.#include<stdio.h>  
2.#include<conio.h>  
3.void printFibonacci(int n){  
4.    static int n1=0,n2=1,n3;  
5.    if(n>0){  
6.         n3 = n1 + n2;  
7.         n1 = n2;  
8.         n2 = n3;  
9.         printf("%d ",n3);  
10.         printFibonacci(n-1);  
11.    }  
12.}  
13.void main(){  
14.    int n;  
15.    clrscr();  
16.    printf("Enter the number of elements: ");  
17.    scanf("%d",&n);  
18.  
19.    printf("Fibonacci Series: ");  
20.    printf("%d %d ",0,1);  
21.    printFibonacci(n-2);//n-2 because 2 numbers are already printed  
22.  
23.    getch();  
24.}  

Output:

Enter the number of elements:15
0 1 1 2 3 5 8 13 21 34 55 89 144 233 377











