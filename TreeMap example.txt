// TreeMap allows u to store keys in sorted order.

Map<Integer,String> mymap=new TreeMap<Integer,String>();
	// Integer is a key and String is a value

mymap.put(30,"hello");
mymap.put(10,"welcome");
mymap.put(20,"hi");

S.o.p(mymap);


Map<String,Integer> mymap=new TreeMap<String,Integer>();
	// String is a key and Integer is a value

mymap.put("hello",30);
mymap.put("welcome",10);
mymap.put("hi",20);

S.o.p(mymap);

class Student
	private String name;
	private int age;

		parameterized constructor


Demo class with main
	create 4 objects of Student by passing name and age

	Map<Student,String> mymap=new TreeMap<Student,String>();
		store above objects of Student class as keys in above map and display the map.

strategy for sorting Student class objects can be given to the TreeMap using either
Comparable or Comparator interface.





solution:1 to the above problem

class Student implements Comparable<Student>
{
	/*public int compareTo(Student ref)
	{
		if(this.age>ref.age)
		{
			return 1;
		}
		else if(this.age<ref.age)
		{
			return -1;
		}
		else
		{
			return 0;
		}
	}*/

	public int compareTo(Student ref)
	{
		return this.name.compareTo(ref.name);
	}
}

drawbacks of Comparable:
	a) u can provide only one strategy to sort
	b) your class (Student) becomes tightly coupled with Comparable.

how to use Comparator?

class AgeComparator implements Comparator<Student>
{
	public int compare(Student ref1,Student ref2)
	{
		if(ref1.getAge()>ref2.getAge())
		{
			return 1;
		}
		else if(ref1.getAge()<ref2.getAge())
		{
			return -1;
		}
		else
		{
			return 0;
		}
	}
}

		new TreeMap<Student,String>(new AgeComparator());


class NameComparator implements Comparator<Student>
{
	public int compare(Student ref1,Student ref2)
	{
		return ref1.getName().compareTo(ref2.getName());
	}
}

	// new TreeMap<Student,String>(new AgeComparator());
	new TreeMap<Student,String>(new NameComparator());

Advantages of Comparator:
	a) u can provide more than one strategies.
	b) your class (Student) becomes loosely coupled with a specific strategy.


in case of TreeSet above code would be:

Set<Student> set=new TreeSet<Student>(new AgeComparator());
	or
Set<Student> set=new TreeSet<Student>(new NameComparator());

set.add(s1);
set.add(s2);
set.add(s3);
set.add(s4);

S.o.p(set);

	




























































































































