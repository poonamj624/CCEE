Interpreter and JIT compiler both are responsible for converting byte code into native code.

interpreter is slow because it interprets one by one instructions inside
bytecode.

JIT compiler is faster becuase it converts a block of code from your bytecode into native code.

JIT compiler requires cache memory in order to store converted code and for the first time at least JIT compiler takes some time to convert the bytecode.

interpreter does not require any cache memory to store the converted code.

Therefore, if the code is to be executed just once, it is better to interpret it instead of compiling.  JVMs that use the JIT compiler internally check how frequently the method is executed ( using “HotSpot Profiler” ) and compile the method only when the frequency is higher than a certain level.